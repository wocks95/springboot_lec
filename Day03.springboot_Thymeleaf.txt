Day03. springboot Thymeleaf

1. View Template Engine
2. 서버에서 클라이언트에게 응답할 브라우저 화면을 만드는 역할을 수행합니다.
3. 기존 HTML 코드와 구조를 그대로 사용하는 Natural Templates 방식을 사용합니다.

Spring Boot와 Thymeleaf
1. 스프링 부트가 채택한 표준 View Template Engine입니다.
2. Thymeleaf 디펜던시만 추가하면 바로 사용할 수 있습니다.

th 속성 사용을 위한 네임스페이스 추가
<html xmlns:th="http://www.thymeleaf.org">


-${}: 컨트롤러에서 전달받은 변수에 접근할 수 있으며 th:속성 내에서만 사용할 수 있음
-@{}: @{...}안에 적힌 URL은 앞에 contextPath/ + URL을 의미함.


*타임리스 주석
1. <!--/* */-->
2. 브라우저 화면에서는 확인할 수 없다.


*타임리프 주요 표현식
1. Ling URL Expression
  1) 경로를 작성할 때 사용합니다.
  2) 형식 : @{}
  3) 활용 예시
   (1) <img th:src="@{/경로}">
   (2) <a th:href="@{/경로}">
   (3) <form th:action="@{/경로}">

2. Value Expression
  1) 값을 나타낼 때 사용합니다.
  2) 형식 : ${}
  3) 영역 구분
    (1) 세션에 저장된 값	  : ${session.값}
    (2) 애플리케이션에 저장된 값  : ${application.값}
  4) th 속성(th: 태그 안의 값을 서버에서 전달 받은 값에 따라서 표현하고자 할 때 사용)
    (1) th:text="${텍스트}"
    (2) th:utext="${HTML요소}"

3. Selection Variable Expression
  1) 객체와 필드를 구분해서 작성할 때 사용합니다.
  2) 형식
    <form th:object="${객체}">
       <input th:field="*{필드}">
       <textarea th:text="*{필드}">     
    </form>

4. Fragment Expression
  1) 조각 만들기
   (1) <태그 th:fragment="조각명"></태그>
   (2) <태그 th:fragment="조각명(매개변수)"></태그>
  2) 조각으로 바꾸기
   (1) <태그 th:replace="~{파일명::조각명}"></태그>
   (2) <태그 th:replace="~{파일명::조각명(인자)}"></태그>
  3) 조각을 넣기
   (1) <태그 th:insert="~{파일명::조각명}"></태그>
   (2) <태그 th:insert="~{파일명::조각명(인자)}"></태그>


*타임리프 주요 제어문

1. 분기문
  1) if 
  2) 형식
   (1) <태그 th:if="${조건식}"></태그>
   (2) <th:block th:if="${조건식}"></th:block>
  3) else
  4) 형식
    (1) <태그 th:unless="${조건식}"></태그>
    (2) <th:block th:if="${조건식}"></th:block>

2. 반복문
  1) 배열 또는 리스트를 순회 할 수 있습니다.
  2) 형식
    (1) <태그 th:each="변수:${배열/리스트}">
          ${변수}
        </태그>
    (2) <태그 th:each="변수,rowStat:${배열/리스트}">
          ${변수}, ${rowStat.index}, ${rowStat.count}
        </태그>
     th:each는 List,배열 등을 구현한 모든 객체를 사용 가능하다.
     변수는 각 요소들의 정보이고 status 변수를 추가해서 row에 대한 추가 정보를 얻을 수 있다.

  3) status 속성
    -index: 0부터 시작
    -count: 1부터 시작
    -size: 총 개수
    -current: 현재 index의 변수
    -event/odd: 짝수/홀수 여부
    -first/last: 처음/마지막 여부

타임리프 주요 유틸리티 객체

1. #lists 
  1) List를 의미합니다.
  2) List의 메소드를 호출할 수 있습니다.

2. #arrays
  1) 배열을 의미합니다.
  2) 주요 사용법
   (1) ${#arrays.length(array)} 	   : 요소의 개수 반환	
   (2) ${#arrays.isEmpty(array)}    	   : 요소가 없으면 true 반환
   (3) ${#arrays.contains(array, element)} : element 가 있으면 true 반환

3. #dates
  1) java.util.Date 를 의미합니다.
  2) 관련 타입을 가진 데이터의 형식을 변환할 수 있습니다.
  3) 원하는 단위의 값을 추출할 수 있습니다.
  4) 주요 사용법
   (1) ${#dates.format(date, 'pattern')} : pattern 지정된 date 반환
   (2) ${#dates.year(date)} 		 : 년도 반환
   (3) ${#dates.month(date)}		 : 월 반환(1~12)	
   (4) ${#dates.day(date)}               : 일 반환(1~31)
   (5) ${#dates.hour(date)}              : 시 반환(0~23)
   (6) ${#dates.minute(date)}            : 분 반환(0~59)
   (7) ${#dates.second(date)}            : 초 반환(0~59)

4. #strings
  1) java.lang.String 을 의미합니다.
  2) 주요 사용법
    (1) ${#strings.toString(obj)}               : obj를 문자열로 반환
    (2) ${#strings.isEmpty(text)}               : text가 빈 문자열 또는 null이면 true 반환
    (3) ${#strings.length(text)}}               : text의 길이 반환
    (4) ${#strings.defaultString(text,default)} : text가 빈 문자열 또는 null이면 default 반환
    (5) ${#strings.contains(text,substr)}       : text가 substr을 포함하면 true 반환
    (6) ${#strings.startsWith(text,substr)}     : text가 substr으로 시작하면 true 반환
    (7) ${#strings.endsWith(text,substr)}       : text가 substr으로 끝나면 true 반환
    (8) ${#strings.indexOf(text,substr)}        : text에 포함된 substr의 인덱스 반환 
    (9) ${#strings.substring(text,begin,end)}   : text의 인덱스 begin부터 end 이전까지 문자열 반환
   (10) ${#strings.replace(text,old,new)}       : text의 old를 new로 변경한 결과 반환
   (11) ${#strings.toUpperCase(text)}           : text를 모두 대문자로 변경한 결과 반환
   (12) ${#strings.toLowerCase(text)}           : text를 모두 소문자로 변경한 결과 반환
   (13) ${#strings.trim(text)}                  : text의 좌우 공백 제거 결과 반환
   (14) ${#strings.abbreviate(text,n)}          : text를 최대 n 만큼만 표시하고 ... 붙인 결과 반환
   (15) ${#strings.arrayJoin(array,text)}       : array의 각 요소 사이에 text를 넣어 연결한 문자열 반환

5. #numbers
  1) 숫자를 다룹니다.
  2) 주요 사용법
    (1) ${#numbers.formatInteger(num,n)}                   : 정수 num을 최소 n 자리로 표시. 부족한 자리는 0을 표시
    (2) ${#numbers.formatInteger(num,n,'COMMA')}           : 정수 num을 최소 n 자리로 표시. 천 단위 구분기호로 콤마(,) 사용
    (3) ${#numbers.formatDecimal(num,int,decimal)}         : 실수 num의 정수부를 최소 int 자리로 표시. 소수부를 최소 decimal 자리로 표시
    (4) ${#numbers.formatDecimal(num,int,decimal,'COMMA')} : 실수 num의 정수부를 최소 int 자리로 표시. 소수부를 최소 decimal 자리로 표시. 천 단위 구분기호로 콤마(,) 사용
    (5) ${#numbers.sequence(from,to)}                      : from ~ to 사이 모든 정수 값을 가지는 시퀀스(배열) 반환
    (6) ${#numbers.sequence(from,to,step)}                 : from ~ to 사이 step 간격의 정수 값을 가지는 시퀀스(배열) 반환

