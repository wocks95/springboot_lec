REST API 개발

1. REpresentational State Transfer (자원을 이름으로 구분하여 해당 자원의 상태를 주고받는 모든 것)
2. 자원(Resource)의 표현 방식(Representation)에 의한 상태 전달(state Tranfer)로 구성
3. 자원의 요청 및 응답에 관한 규칙을 정의하는 것 


REST 의 구성 요소

1. 자원(Resource)
  1) 서버에 존재하는 데이터를 의미합니다.
  2) 해당 데이터를 찾기 위한 URL 을 의미합니다.
2. 행위(Verb)
  1) HTTP Method를 활용합니다.
  2) HTTP Method | 의미                  |  예시                       | 
     ------------|-----------------------|-----------------------------|
     GET         | 조회(Read, SELECT)    |  GET /users                 |
                 |                       |  GET /users/1               |
     POST        | 생성(Create, INSERT)  |  POST /users/               |
     PUT         | 수정(Update, UPDATE)  |  PUT /users/1=${userId}     |
     DELETE      | 삭제(Delete, DELETE)  |  DELETE /users/1            |
    -------------|-----------------------|-----------------------------|
3. 표현(Representation)
  1) 자원을 표현하는 방식을 의미합니다.
  2) JSON, XML, TEXT, CSS, RSS 등 데이터의 종류를 의미한다.
  3) 최근에 가장 많이 사용하는 것은 JSON 입니다.

REST API 설계 방식
1. 자원은 URI로 표시하고, 행위는 HTTP Method로 표시합니다.
2. URI 계층 구분은 슬래시(/)로 하고, 마지막엔 슬래시(/)를 표시하지 않습니다.
3. 소문자만 사용하고, 밑줄(_) 대신 |하이픈(-)을 사용|합니다.
4. 특정 파일 포맷의 경우 확장자를 생략합니다. 대신 Accept 헤더에 지정합니다. 
5. 동작이나 행위를 의미하는 단어를 사용하지 않습니다.
 예) /user/regist(등록), /user/list(목록), /user/detail(상세), /user/modify(수정), /user/remove(삭제)등을 지양합니다.
6. 가급적이면 |명사를 사용|합니다. 동사를 지양합니다.
7. 쿼리 스트링 방식이 아닌 |경로 변수 방식|을 사용합니다.
  1) 쿼리 스트링 : url?userId=1
  2) 경로 변수   : url/userId/1

*@PathVariable 조사하기
 경로 변수를 표시하기 위해 메서드에 매개변수에 사용된다.
 경로 변수는 {id}로 둘러싸인 값을 나타냄
 URL 경로에서 변수 값을 추출하여 매개변수에 할당한다.
 반드시 값을 가져야 하며, 값이 없는 경우 404 오류가 발생한다.
 주로 상세 조회, 수정, 삭제와 같은 작업에서 리소스 식별자로 사용된다.

예)@PutMapping("/users/{userId}")
  public ResponseMessage modifyUser(@PathVariable int userId, @RequestBody UserDto userDto) {}

*201 Created
 요청이 성공적으로 처리되었으며, 
 자원이 생성되었음을 나타내는 성공 상태 응답 코드입니다. 
 응답이 반환되기 이전에 새로운 리소스가 생성되며, 
 응답 메시지 본문에 새로 만들어진 리소스 혹은 
 리소스에 대한 설명과 링크를 메시지 본문에 넣어 반환합니다. 
 그 위치는 요청 URL 또는 Location 헤더 값의 URL 입니다.

 이 상태 코드의 일반적인 사용 사례는 POST 요청에 대한 결과입니다.

*ResponseEntity
-HTTP 응답을 나타내는 Spring Framework의 클래스입니다.
-요청에 대한 응답의 Header, Body 및 Status Code를 포함하여 클라이언트에게 전달할 수 있는
 다양한 기능을 제공합니다.
-사용해야 하는 이유?
 1) HTTP 상태 코드 제어: ResponseEntity를 사용하면 응답에 대한 HTTP 상태 코드를 명시적으로
			 명시적으로 지정할 수 있습니다. 정확한 상태 정보를 제공
 2) 응답 본문 및 헤더 제어: 응답 본문과 헤더를 세밀하게 제어할 수 있습니다.
 3) 유연성 : 


*MethodArgumentNotValidException란?