2025.02.11 
JPQL (Java Persistence Query Language)
1. 엔티티(객체)를 중심으로 개발하기 위한 객체 지향 쿼리문입니다.
2. SQL 보다 간결하며 특정 DBMS 에 의존하지 않습니다.
3. find() 메소드를 통한 조회와 다르게 항상 데이터베이스에서 조회합니다.
4. JPQL로 조회한 엔티티는 영속 컨텍스트에 저장됩니다.
5. SELECT, UPDATE, DELECT 문은 SQL문과 동일한 구문을 사용합니다.
6. INSERT 문은 persist() 메소드를 사용합니다.
7. JPQL의 구문은 대소문자를 구분하지 않습니다. (단, 엔티티와 속성의 대소문자는 구분합니다.)
8. JPQL은 반드시 엔티티의 별명(Alias)을 사용해야 합니다. (에러 발생)

JPQL 작성 순서
1. JPQL 문자열을 작성합니다. (SELECT 필드 FROM 엔티티)
2. 작성된 JPQL 문자열을 EntityManager 의 createQuery() 메소드에 전달합니다.
  1) TypedQuery : 반환할 타입을 명확하게 지정할 때 사용합니다.
  2) Query      : 반환할 타입을 명시하지 않습니다. 반환 타입은 Object 또는 Object[] 입니다.
3. 쿼리 객체(TypedQuery, Query)가 제공하는 getSingleResult() 또는 getResultList()
   메소드를 호출해서 쿼리를 실행합니다.
  1) getSingleResult() : 결과 행이 1개일 때 사용합니다. 결과가 없거나 2개 이상이면 예외가 발생합니다.
  2) getResultList() : 결과 행이 2개 이상일 때 사용합니다. 결과가 없으면 비어 있는 컬렉션을 반환합니다.

Parameter
1. Parameter 바인딩 하는 방법
 1)이름 기준 파라미터(named parameters)
   : 다음에 이름 기준 파라미터를 지정
 2)위치 기준 파라미터(positional parameters)
   ? 다음에 값을 주고 위치 값은 1부터 시작

Paging API 활용 setFirstResult() / setMaxResults()
 int offset = 15; // 조회를 건너 뛸 행의 수 (limit이 5라는 가정하에, 0이면 첫 페이지, 5면 두 번째 페이지)
 int limit = 5;   // 조회할 행의 수

 String jpql = "SELECT m FROM menu1 m ORDER BY m.menuCode DESC"

 List<Menu> menuList = entityManager.createQuery(jpql, Menu.class)
                                    .setFirstResult(offset)
                                    .setMaxResults(limit)
                                    .getResultList();
 assertNotNull(menuList);
 menuList.forEach(System.out::println);

Group function
※JPQL의 그룹함수(COUNT, MAX, MIN, SUM, AVG) 사용 시 주의사항
- 그룹함수의 반환타입은 결과 값이 정수면 Long, 실수면 Double로 반환됨
- 값이 없는 상태에서 count를 제외한 그룹 함수는 null이 되고 count만 0이 됨
  따라서 반환 값을 담기 위해 선언하는 변수 타입을 기본 자료형으로 하게 되면, 조회 결과를 언박싱 할 때 NullPointerException이 발생
- 그룹 함수의 반환 자료형은 Long or Double형이기 때문에 Having절에서 그룹 함수 결과 값과 비교하기 위한 파라미터 타입 Long or Double으로 해야함

-SUM ->  org.junit.jupiter.api.Assertions.assertThrows() // NullPointerException이 발생한다고 예상

프로젝션 (Projection)
1. SELECT 절에서 조회할 대상을 지정하는 것을 의미합니다.
   SELECT { 프로젝션 대상 } FROM
2. 종류
  1) 엔티티 프로젝션 : 엔티티를 조회하는 방식입니다. 조회된 엔티티는 영속 컨텍스트에 저장됩니다.
  2) 스칼라 타입 프로젝션 : 기본 데이터(숫자, 문자, 날짜 등)를 조회하는 방식입니다. 조회된 스칼라 데이터는 영속 컨텍스트에 저장되지 않습니다.
  3) 임베디드 타입 프로젝션 : @Embeddable 을 이용해 포함한 객체를 조회하는 방식입니다. 조회된 임베디드 타입은 영속 컨텍스트에 저장되지 않습니다.
     임베디드 타입은 FROM 절에서 사용할 수 없습니다.
  4) new 생성 플로젝션 : 다양한 값을 저장한 DTO 방식으로 조회하는 방식입니다. new 를 이용해 객체를 생성하기 때문에 영속 컨텍스트에 저장되지 않습니다.
 
조인
1.내부_조인(내부조인을 이용한 조회 테스트)
-Menu 엔티티에 대한 조회만 일어나고 Category 엔티티에 대한 조회는 나중에 필요할 때 일어남, select 대상은 영속화하여 가져오지만 join의 대상은 영속화하여 가져오지 않음
 : String jpql = "SELECT m FROM menu m JOIN m.category c";
   List<Menui> menuList = emtityManager.createQuery(jpql, Menu.class).getResultList();
   
   Assertions.assertThat(menuList).isNotEmpty();
   menuList.forEach(System.ou::println);
   
2.외부_조인(외부조인을 이용한 조회 테스트)
   : String jpql = "SELECT m.menuName, c.categoryName FROM menu3 m RIGHT JOIN m.category c ORDER BY c.categoryCode";
     List<Objectp[]> menuList = entityManager.createQuery(jpql, Object[].class).getResultList();

     Assertions.assertThat(menuList).isNotEmpty();
     menuList.forEach(row -> {
      System.out.println( Arrays.toString(row));
     });

서브쿼리

동적쿼리
